### Starting build.
# Target: src/main.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/main.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/main.ml > src/main.ml.depends
# Target: src/closure.mli.depends, tags: { external_tokens(Tokens), explain, extension:mli, file:src/closure.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/closure.mli > src/closure.mli.depends
# Target: src/ast.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/ast.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/ast.ml > src/ast.ml.depends
# Target: src/utils.mli.depends, tags: { external_tokens(Tokens), explain, extension:mli, file:src/utils.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/utils.mli > src/utils.mli.depends
# Target: src/utils.cmi, tags: { external_tokens(Tokens), byte, compile, explain, extension:mli, file:src/utils.mli, interf, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/utils.cmi src/utils.mli
# Target: src/ast.cmo, tags: { external_tokens(Tokens), byte, compile, explain, extension:cmo, extension:ml, file:src/ast.cmo, file:src/ast.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/ast.cmo src/ast.ml
# Target: src/eval.mli.depends, tags: { external_tokens(Tokens), explain, extension:mli, file:src/eval.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/eval.mli > src/eval.mli.depends
# Target: src/lexer.mll, tags: { external_tokens(Tokens), explain, extension:mll, file:src/lexer.mll, lexer, ocaml, ocamllex, quiet, traverse, use_menhir }
ocamllex.opt -q src/lexer.mll
# Target: src/lexer.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/lexer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/lexer.ml > src/lexer.ml.depends # cached
# Target: src/tokens.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/tokens.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/tokens.ml > src/tokens.ml.depends
# Target: src/tokens.cmo, tags: { external_tokens(Tokens), byte, compile, explain, extension:cmo, extension:ml, file:src/tokens.cmo, file:src/tokens.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/tokens.cmo src/tokens.ml
# Target: src/lexer.cmo, tags: { external_tokens(Tokens), byte, compile, explain, extension:cmo, extension:ml, file:src/lexer.cmo, file:src/lexer.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/lexer.cmo src/lexer.ml # cached
# Target: src/parser.mly.depends, tags: { external_tokens(Tokens), explain, extension:mly, file:src/parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse, use_menhir }
menhir --external-tokens Tokens --raw-depend --ocamldep 'ocamldep.opt -modules' src/parser.mly > src/parser.mly.depends
# Target: src/parser.mly, tags: { external_tokens(Tokens), byte, compile, explain, extension:ml, extension:mly, file:src/parser.ml, file:src/parser.mly, infer, menhir, ocaml, parser, quiet, traverse, use_menhir }
menhir --ocamlc 'ocamlc.opt -I src' --explain --infer --external-tokens Tokens src/parser.mly
# Target: src/parser.mli.depends, tags: { external_tokens(Tokens), explain, extension:mli, file:src/parser.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/parser.mli > src/parser.mli.depends # cached
# Target: src/parser.cmi, tags: { external_tokens(Tokens), byte, compile, explain, extension:mli, file:src/parser.mli, interf, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/parser.cmi src/parser.mli # cached
# Target: src/printer.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/printer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/printer.ml > src/printer.ml.depends
# Target: src/typing.mli.depends, tags: { external_tokens(Tokens), explain, extension:mli, file:src/typing.mli, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/typing.mli > src/typing.mli.depends
# Target: src/closure.cmi, tags: { external_tokens(Tokens), byte, compile, explain, extension:mli, file:src/closure.mli, interf, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/closure.cmi src/closure.mli
# Target: src/eval.cmi, tags: { external_tokens(Tokens), byte, compile, explain, extension:mli, file:src/eval.mli, interf, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/eval.cmi src/eval.mli
# Target: src/printer.cmo, tags: { external_tokens(Tokens), byte, compile, explain, extension:cmo, extension:ml, file:src/printer.cmo, file:src/printer.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/printer.cmo src/printer.ml
# Target: src/typing.cmi, tags: { external_tokens(Tokens), byte, compile, explain, extension:mli, file:src/typing.mli, interf, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/typing.cmi src/typing.mli
# Target: src/main.cmo, tags: { external_tokens(Tokens), byte, compile, explain, extension:cmo, extension:ml, file:src/main.cmo, file:src/main.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlc.opt -c -I src -o src/main.cmo src/main.ml
# Target: src/closure.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/closure.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/closure.ml > src/closure.ml.depends
# Target: src/utils.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/utils.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/utils.ml > src/utils.ml.depends
# Target: src/utils.cmx, tags: { external_tokens(Tokens), compile, explain, extension:cmx, extension:ml, file:src/utils.cmx, file:src/utils.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -I src -o src/utils.cmx src/utils.ml
# Target: src/ast.cmx, tags: { external_tokens(Tokens), compile, explain, extension:cmx, extension:ml, file:src/ast.cmx, file:src/ast.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -I src -o src/ast.cmx src/ast.ml
# Target: src/eval.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/eval.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/eval.ml > src/eval.ml.depends
# Target: src/tokens.cmx, tags: { external_tokens(Tokens), compile, explain, extension:cmx, extension:ml, file:src/tokens.cmx, file:src/tokens.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -I src -o src/tokens.cmx src/tokens.ml
# Target: src/lexer.cmx, tags: { external_tokens(Tokens), compile, explain, extension:cmx, extension:ml, file:src/lexer.cmx, file:src/lexer.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -I src -o src/lexer.cmx src/lexer.ml # cached
# Target: src/parser.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/parser.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/parser.ml > src/parser.ml.depends # cached
# Target: src/parser.cmx, tags: { external_tokens(Tokens), compile, explain, extension:cmx, extension:ml, file:src/parser.cmx, file:src/parser.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -I src -o src/parser.cmx src/parser.ml # cached
# Target: src/typing.ml.depends, tags: { external_tokens(Tokens), explain, extension:ml, file:src/typing.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamldep.opt -modules src/typing.ml > src/typing.ml.depends
# Target: src/closure.cmx, tags: { external_tokens(Tokens), compile, explain, extension:cmx, extension:ml, file:src/closure.cmx, file:src/closure.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -I src -o src/closure.cmx src/closure.ml
# Target: src/eval.cmx, tags: { external_tokens(Tokens), compile, explain, extension:cmx, extension:ml, file:src/eval.cmx, file:src/eval.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -I src -o src/eval.cmx src/eval.ml
# Target: src/printer.cmx, tags: { external_tokens(Tokens), compile, explain, extension:cmx, extension:ml, file:src/printer.cmx, file:src/printer.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -I src -o src/printer.cmx src/printer.ml
# Target: src/typing.cmx, tags: { external_tokens(Tokens), compile, explain, extension:cmx, extension:ml, file:src/typing.cmx, file:src/typing.ml, implem, native, ocaml, quiet, traverse, use_menhir }
ocamlopt.opt -c -I src -o src/typing.cmx src/typing.ml
+ ocamlopt.opt -c -I src -o src/typing.cmx src/typing.ml
File "src/typing.ml", line 26, characters 7-22:
Warning 10: this expression should have type unit.
File "src/typing.ml", line 1:
Error: The implementation src/typing.ml
       does not match the interface src/typing.cmi:
       Values do not match:
         val typing_ast : 'a * Ast.cmd -> 'b
       is not included in
         val typing_ast : Ast.t -> (Ast.t, typing_error) Utils.result
       File "src/typing.ml", line 7, characters 8-18: Actual declaration
Command exited with code 2.
# Compilation unsuccessful.
